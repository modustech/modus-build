name: "Modus Common Build"
description: "Common build steps for each service"

inputs:
  ecr_repository:
    description: "repository name of the service"
    required: true
  ecr_registry:
    description: "the ecr registry from aws login"
    required: true
  aws_access_key_id:
    description: "aws access key id"
    required: true
  aws_secret_access_key:
    description: "aws secret access key"
    required: true
  version_tag:
    description: "the bumped version tag"
    required: true
  codecov_tag:
    description: "the code coverage tag name"
    required: true
  repo_name:
    description: "the code repository name"
    required: true

runs:
  using: "composite"
  steps:
    - 
      name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - 
      name: Cache Code Climate Binary
      id: cachecodeclimate
      uses: actions/cache@v2
      with:
        path: |
          ./test-reporter-latest-linux-amd64
        key: cachecodeclimate
    - 
      name: codeclimate-download
      if: steps.cachecodeclimate.outputs.cache-hit != 'true'
      env:
        CC_TEST_REPORTER_ID: 33c667de6f083eb96127c0bd28a3f54e09b5548945f12fb859f38237568076a0
      run: |
        wget https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
        chmod +x test-reporter-latest-linux-amd64
      shell: bash
    - 
      name: Build and Push
      env:
        ECR_REGISTRY: ${{ inputs.ecr_registry }}
        ECR_REPOSITORY: ${{ inputs.ecr_repository }}
        IMAGE_TAG: ${{ inputs.version_tag }}
        CODECOV_TAG: ${{ inputs.codecov_tag }}
      run: |
        docker build --build-arg NPM_TOKEN=$NPM_TOKEN --target codecov -t $CODECOV_TAG .
        docker build --build-arg NPM_TOKEN=$NPM_TOKEN -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker create --name scratch ${{ inputs.repo_name }}-codecov
        docker cp scratch:/app ./app
      shell: bash
    - 
      name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.9.3
    - 
      name: Package Helm chart
      id: helm-package
      run: |
        sed -i 's/dev/${{ inputs.version_tag }}/g' ./charts/${{ inputs.repo_name }}/values.yaml
        helm package ./charts/${{ inputs.repo_name }} --version ${{ inputs.version_tag }}
      shell: bash
    - 
      name: Push Helm chart to S3
      id: helm-publish
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: 'us-west-2'
        AWS_S3_BUCKET: modustech-helm-charts
      run: |
        helm plugin install https://github.com/hypnoglow/helm-s3.git
        helm repo add s3repo s3://modustech-helm-charts/charts
        helm s3 push --force ${{ inputs.repo_name }}-${{ inputs.version_tag }}.tgz s3repo
      shell: bash
